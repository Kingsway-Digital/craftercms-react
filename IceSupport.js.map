{"version":3,"sources":["src/IceSupport.js"],"names":["IceIsAuthoringContext","IceIsLoggedInContext","IceSupport","props","isAuthoring","setIsAuthoring","isLoggedIn","setIsLoggedIn","loading","setLoading","then","isAuthSvrResp","fetch","res","json","result","active","console","debug","user","username","err","error","JSON","stringify","children","useIceAllowed"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,qBAAqB,gBAAG,2BAA9B;AACA,IAAMC,oBAAoB,gBAAG,2BAA7B;;AAEO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAChC,kBAAsC,qBAAS,IAAT,CAAtC;AAAA;AAAA,MAAOC,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAAoC,qBAAS,IAAT,CAApC;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAA8B,qBAAS,KAAT,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,wBAAU,YAAM;AACd,QAAIL,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA,UAAI,CAACI,OAAL,EAAc;AACZ;AACAC,QAAAA,UAAU,CAAC,IAAD,CAAV;AACA,qCAAmBC,IAAnB,CAAwB,UAACC,aAAD,EAAmB;AACzC,cAAIA,aAAJ,EAAmB;AACjB;AACA;AACAC,YAAAA,KAAK,CAAC,6DAAD,CAAL,CACGF,IADH,CACQ,UAACG,GAAD;AAAA,qBAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,aADR,EAEGJ,IAFH,CAGI,UAACK,MAAD,EAAY;AACV,kBAAIA,MAAM,CAACC,MAAX,EAAmB;AACjB;AACAT,gBAAAA,aAAa,CAAC,IAAD,CAAb;AACA,gDACGG,IADH,CACQ,YAAM;AACVO,kBAAAA,OAAO,CAACC,KAAR,CACE,+DACEH,MAAM,CAACI,IAAP,CAAYC,QADd,GAEE,IAHJ;AAKAf,kBAAAA,cAAc,CAACM,aAAD,CAAd;AACAF,kBAAAA,UAAU,CAAC,KAAD,CAAV;AACD,iBATH,WAUS,UAACY,GAAD,EAAS;AACdJ,kBAAAA,OAAO,CAACK,KAAR,CACE,uCACEC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAFJ;AAID,iBAfH;AAgBD,eAnBD,MAmBO;AACL;AACAd,gBAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,aA3BL,EA4BI,UAACe,KAAD,EAAW;AACTL,cAAAA,OAAO,CAACK,KAAR,CACE,uCAAuCC,IAAI,CAACC,SAAL,CAAeF,KAAf,CADzC;AAGD,aAhCL;AAkCD,WArCD,MAqCO;AACL;AACAjB,YAAAA,cAAc,CAACM,aAAD,CAAd;AACAF,YAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,SA3CD;AA4CD;AACF;AACF,GApDD,EAoDG,CAACL,WAAD,EAAcI,OAAd,CApDH;AAsDA,sBACE,gCAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEF;AAAtC,kBACE,gCAAC,qBAAD,CAAuB,QAAvB;AAAgC,IAAA,KAAK,EAAEF;AAAvC,KACGD,KAAK,CAACsB,QADT,CADF,CADF;AAOD;;AAEM,SAASC,aAAT,GAAyB;AAC9B,MAAMtB,WAAW,GAAG,uBAAWJ,qBAAX,CAApB;AACA,MAAMM,UAAU,GAAG,uBAAWL,oBAAX,CAAnB;AACA,SAAOG,WAAW,IAAIE,UAAtB;AACD","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { addAuthoringSupport, fetchIsAuthoring } from \"@craftercms/ice\";\n\nconst IceIsAuthoringContext = createContext();\nconst IceIsLoggedInContext = createContext();\n\nexport function IceSupport(props) {\n  const [isAuthoring, setIsAuthoring] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (isAuthoring === null) {\n      // console.log(\"Authoring environment status is not known\")\n      if (!loading) {\n        // console.log(\"Looking up authoring status.\")\n        setLoading(true);\n        fetchIsAuthoring().then((isAuthSvrResp) => {\n          if (isAuthSvrResp) {\n            // console.log(\"Authoring environment detected.\");\n            // we are in authoring. Go figure out if we're logged in or not.\n            fetch(\"/studio/api/1/services/api/1/security/validate-session.json\")\n              .then((res) => res.json())\n              .then(\n                (result) => {\n                  if (result.active) {\n                    // console.log(\"User \"+result.user.username+\" is logged in.  Loading authoring tools.\");\n                    setIsLoggedIn(true);\n                    addAuthoringSupport()\n                      .then(() => {\n                        console.debug(\n                          \"Authoring tools have loaded and are ready to use by user {\" +\n                            result.user.username +\n                            \"}.\"\n                        );\n                        setIsAuthoring(isAuthSvrResp);\n                        setLoading(false);\n                      })\n                      .catch((err) => {\n                        console.error(\n                          \"Failure adding authoring support: \" +\n                            JSON.stringify(err)\n                        );\n                      });\n                  } else {\n                    // console.log(\"User is not logged in\");\n                    setIsLoggedIn(false);\n                  }\n                },\n                (error) => {\n                  console.error(\n                    \"Failure checking for active user: \" + JSON.stringify(error)\n                  );\n                }\n              );\n          } else {\n            // console.log(\"Authoring environment not detected.\");\n            setIsAuthoring(isAuthSvrResp);\n            setLoading(false);\n          }\n        });\n      }\n    }\n  }, [isAuthoring, loading]);\n\n  return (\n    <IceIsLoggedInContext.Provider value={isLoggedIn}>\n      <IceIsAuthoringContext.Provider value={isAuthoring}>\n        {props.children}\n      </IceIsAuthoringContext.Provider>\n    </IceIsLoggedInContext.Provider>\n  );\n}\n\nexport function useIceAllowed() {\n  const isAuthoring = useContext(IceIsAuthoringContext);\n  const isLoggedIn = useContext(IceIsLoggedInContext);\n  return isAuthoring && isLoggedIn;\n}\n"],"file":"IceSupport.js"}