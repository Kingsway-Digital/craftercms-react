{"version":3,"sources":["src/Spa.js"],"names":["baseUrlFromEnv","process","env","REACT_APP_STUDIO_BASE_URL","baseUrlFromCrafter","extractConfigFromFreemarker","siteNameFromEnv","REACT_APP_STUDIO_SITE_NAME","siteNameFromCrafter","crafterConfig","site","baseUrl","console","error","Error","crafterConf","configure","getCrafterSite","getCrafterBaseUrl","Spa","props","children","getConfig","length","setBearerTokenInCrafterClient","token","config","headers","Authentication","clearBearerTokenInCrafterClient","param","elementId","theElement","document","getElementById","val","dataset","startsWith","endsWith"],"mappings":"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","sourcesContent":["import { crafterConf } from \"@craftercms/classes\";\n\nconst baseUrlFromEnv = process.env.REACT_APP_STUDIO_BASE_URL;\nconst baseUrlFromCrafter = extractConfigFromFreemarker(\"b\", \"root\");\n\nconst siteNameFromEnv = process.env.REACT_APP_STUDIO_SITE_NAME;\nconst siteNameFromCrafter = extractConfigFromFreemarker(\"s\", \"root\");\n\nconst crafterConfig = { site: null, baseUrl: null };\n\nif (!siteNameFromEnv && !siteNameFromCrafter) {\n  console.error(\"Site name not set\");\n  throw Error(\"Configuration error\");\n} else if (siteNameFromCrafter && !baseUrlFromCrafter) {\n  // if crafter provided the site it better provide the base URL\n  console.error(\"Base url not set\");\n  throw Error(\"Configuration error\");\n} else {\n  crafterConfig.site = siteNameFromCrafter\n    ? siteNameFromCrafter\n    : siteNameFromEnv;\n  crafterConfig.baseUrl = baseUrlFromCrafter\n    ? baseUrlFromCrafter\n    : baseUrlFromEnv\n    ? baseUrlFromEnv\n    : \"\";\n  crafterConf.configure(crafterConfig);\n  // console.debug(\"Crafter SDK configured\", crafterConf.getConfig());\n}\n\nexport const getCrafterSite = () => crafterConfig.site;\nexport const getCrafterBaseUrl = () => crafterConfig.baseUrl;\n\nexport const Spa = (props) => {\n  const { children } = props;\n  if (crafterConf.getConfig().site && crafterConf.getConfig().site.length > 0) {\n    return children;\n  } else {\n    console.error(\"Site not found in configuration.\");\n    return \"Configuration error\";\n  }\n};\n\nexport const setBearerTokenInCrafterClient = (token) => {\n  // console.debug(\"Adding bearer token to Crafter client\");\n  if (token) {\n    const config = crafterConf.getConfig();\n    if (config.site && config.site.length > 0) {\n      crafterConf.configure({ headers: { Authentication: \"Bearer \" + token } });\n    }\n  }\n};\n\nexport const clearBearerTokenInCrafterClient = () => {\n  // console.debug(\"Clearing bearer token from Crafter client\");\n  crafterConf.configure({ headers: { Authentication: \"\" } });\n};\n\n/**\n * Grabs the param from the dataset attribute in the specified\n * element ID and returns it.\n *\n * This function is designed to ignore values that begin with\n * <code>${</code> and end with <code>}</code> - it will return\n * null in those cases.  This effectively ignores freemarker\n * includes that aren't populated.\n *\n * Typical usage:\n * html:\n * <div id=\"root\" data-site=\"mySiteName\" data-flag2=\"flag 2 value\" />\n *\n * javascript:\n * import {extractConfigFromFreemarker} from '@kingsway/craftercms-utils'\n * const siteName = extractPassedFreemarkerConfig(\"site\", \"root\")\n * const importantFlag = extractPassedFreemarkerConfig('flag2', 'root')\n *\n * @param param the name of the param (data-PARAM='VALUE') in the\n *              specified element\n * @param elementId the id of the element to search.\n * @returns {null|*} the value if set, or null.\n */\nfunction extractConfigFromFreemarker(param, elementId) {\n  const theElement = document.getElementById(elementId);\n  const val = theElement.dataset[param];\n  theElement.dataset[param] = \"\";\n  if (val && val.startsWith(\"${\") && val.endsWith(\"}\")) return null;\n  return val;\n}\n"],"file":"Spa.js"}